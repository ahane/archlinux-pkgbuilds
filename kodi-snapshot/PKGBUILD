# vim:set ft=sh:
# Maintainer: dhead666
# Contributor: BlackIkeEagle < ike DOT devolder AT gmail DOT com >
# Contributor: DonVla <donvla@users.sourceforge.net>
# Contributor: Ulf Winkelvos <ulf [at] winkelvos [dot] de>
# Contributor: Ralf Barth <archlinux dot org at haggy dot org>
# Contributor: B & monty - Thanks for your hints :)
#
# Original credits go to Edgar Hucek <gimli at dark-green dot com>
# for his xbmc-vdpau-vdr PKGBUILD at https://archvdr.svn.sourceforge.net/svnroot/archvdr/trunk/archvdr/xbmc-vdpau-vdr/PKGBUILD
#
# kodi-snapshot follows xbmc-git which maintained by BlackIkeEagle so I (dhead666) don't not really putting any effort in maintaining it

pkgname=kodi-snapshot
_pkgname=kodi
pkgver=14.0b3
_pkgvername=Helix
_pkgsrcname=$_pkgname-$pkgver-$_pkgvername
pkgrel=1
pkgdesc="Kodi Media Center git master branch"
provides=('xbmc' 'kodi')
conflicts=('xbmc' 'xbmc-pulse' 'xbmc-svn' 'xbmc-git-xvba' 'xbmc-git' 'kodi' 'kodi-git' )
arch=('i686' 'x86_64')
url="http://xbmc.org"
license=('GPL' 'LGPL')
depends=(
'bluez-libs' 'curl' 'glew' 'hicolor-icon-theme' 'lame' 'libaacs'
'libass' 'libbluray' 'libcdio' 'libmariadbclient' 'libmicrohttpd' 'libmodplug'
'libmpeg2' 'libpulse' 'libsamplerate' 'libssh' 'libva' 'libvdpau' 'libvorbis'
'libxrandr' 'libxslt' 'lzo' 'mesa' 'python2-pillow' 'python2-simplejson'
'rtmpdump' 'sdl_image' 'smbclient' 'taglib' 'tinyxml' 'xorg-xdpyinfo' 'yajl' 'sdl2'
)
makedepends=(
'afpfs-ng' 'boost' 'cmake' 'doxygen' 'git' 'gperf' 'jasper'
'java-runtime' 'libcec' 'libnfs' 'libplist' 'nasm' 'shairplay'
'swig' 'unzip' 'upower' 'zip'
)
optdepends=(
'gdb: for meaningful backtraces in case of trouble - STRONGLY RECOMMENDED'
'afpfs-ng: Apple shares support'
'bluez: Blutooth support'
'libnfs: NFS shares support'
'libplist: AirPlay support'
'libcec: Pulse-Eight USB-CEC adapter support'
'lirc: Remote controller support'
'pulseaudio: PulseAudio support'
'shairplay: AirPlay support'
'udisks: Automount external drives'
'unrar: Archives support'
'unzip: Archives support'
'upower: Display battery level'
)
install="$pkgname.install"
source=(
	"https://github.com/xbmc/xbmc/archive/$pkgver-$_pkgvername.tar.gz"
	"$_pkgname.service"
)
sha256sums=(
	'SKIP'
	'547e06f3141866cd34b1df34025517e9826992b67543af7621d954bcdfa0ba94'
)

_prefix='/usr'

prepare() {
	msg "Starting make..."

	mv "${srcdir}/xbmc-$pkgver-$_pkgvername" "${srcdir}/$_pkgsrcname"

	cd "${srcdir}/$_pkgsrcname"

	find -type f -name *.py -exec sed 's|^#!.*python$|#!/usr/bin/python2|' -i "{}" +
	sed 's|^#!.*python$|#!/usr/bin/python2|' -i tools/depends/native/rpl-native/rpl
	sed 's/python/python2/' -i tools/Linux/kodi.sh.in
}

build() {
	cd "${srcdir}/$_pkgsrcname"

	msg "Starting make..."


	# Configure Kodi
	#
	# Note on external-libs:
	#   - We cannot use external python because Arch's python was built with
	#     UCS2 unicode support, whereas kodi expects UCS4 support
	#   - According to an kodi dev using external/system ffmpeg with kodi is "pure stupid" :D

	msg2 "Bootstrapping Kodi"
	./bootstrap

	# latest configure options
	# --enable-neon           enable neon passing to ffmpeg (default is no)
	# --enable-optimizations  enable optimization (default is yes)
	# --enable-gl             enable OpenGL rendering (default is yes)
	# --enable-gles           enable OpenGLES rendering (default is no)
	# --enable-sdl            enable SDL (default is auto)
	# --enable-vdpau          enable VDPAU decoding (default is auto)
	# --enable-vaapi          enable VAAPI decoding (default is auto)
	# --enable-crystalhd      enable CrystalHD decoding (default is auto)
	# --enable-vdadecoder     enable VDADecoder decoding (default is auto)
	# --enable-vtbdecoder     enable VTBDecoder decoding (default is auto)
	# --enable-openmax        enable OpenMax decoding (default is auto, requires OpenGLES)
	# --enable-tegra          enable Tegra2 arm (default is no)
	# --enable-profiling      enable gprof profiling (default is no)
	# --enable-joystick       enable SDL joystick support (default is yes)
	# --enable-xrandr         enable XRandR support (default is yes)
	# --enable-goom           enable GOOM visualisation (default is no)
	# --enable-rsxs           enable really slick X screensavers (default is yes)
	# --enable-projectm       enable ProjectM visualisation (default is yes)
	# --enable-x11            enable x11 (default is yes) 'Linux Only'
	# --enable-ccache         enable building with ccache feature (default is auto)
	# --enable-pulse          enable PulseAudio support (default is auto)
	# --enable-rtmp           enable RTMP support via librtmp (default is auto)
	# --disable-samba         disable SAMBA support (default is enabled)
	# --enable-nfs            enable NFS support via libnfs (default is auto)
	# --enable-afpclient      enable AFP support via libafpclient (default is auto)
	# --enable-airplay        enable AirPlay support(default is auto)
	# --enable-airtunes       enable AirTunes support(default is auto)
	# --enable-ffmpeg-libvorbis enable FFmpeg vorbis encoding (default is no)
	# --enable-dvdcss         enable DVDCSS support (default is yes)
	# --enable-mid            enable MID support (default is no)
	# --disable-hal           disable HAL support (default is enabled if hal and hal-storage is found)
	# --disable-avahi         disable Avahi support (default is enabled if libavahi-common and libavahi-client is found)
	# --disable-non-free      disable componentents with non-compliant licenses
	# --enable-asap-codec     enable ASAP ADPCM support
	# --disable-webserver     disable webserver
	# --disable-optical-drive disable optical drive
	# --enable-libbluray      enable libbluray support
	# --enable-texturepacker  enable texturepacker support (default is yes)
	# --enable-udev           enable udev support (default is auto)
	# --enable-libusb         enable libusb support (default is auto)
	# --enable-libcec         enable libcec support (default is auto)
	# --enable-external-libraries enable use of all supported external libraries (default is no) 'Linux only'
	# --enable-external-ffmpeg enable use of external ffmpeg libraries (default is no) 'Linux only'

	msg2 "Configuring Kodi"
	export PYTHON_VERSION=2  # external python v2
	./configure --prefix=$_prefix --exec-prefix=$_prefix \
		--enable-debug \
		--disable-optimizations \
		--enable-gl \
		--enable-vaapi \
		--enable-vdpau \
		--enable-joystick \
		--enable-xrandr \
		--enable-rsxs \
		--enable-projectm \
		--enable-x11 \
		--enable-pulse \
		--enable-rtmp \
		--enable-samba \
		--enable-nfs \
		--enable-afpclient \
		--enable-airplay \
		--enable-airtunes \
		--enable-ffmpeg-libvorbis \
		--enable-dvdcss \
		--disable-hal \
		--enable-avahi \
		--enable-webserver \
		--enable-optical-drive \
		--enable-libbluray \
		--enable-texturepacker \
		--enable-udev \
		--enable-libusb \
		--enable-libcec \
		--enable-external-libraries \
		--with-lirc-device=/run/lirc/lircd

	# Now (finally) build
	make
}

package() {
	cd $_pkgsrcname
	msg2 "Running make install" 
	make DESTDIR="$pkgdir" install

	# Tools
	msg2 "Tools"
	install -Dm755 $srcdir/$_pkgsrcname/tools/TexturePacker/TexturePacker \
		${pkgdir}${_prefix}/lib/kodi/

	# Licenses
	msg2 "Copy licenses"
	install -dm755 ${pkgdir}${_prefix}/share/licenses/${pkgname}
	for licensef in LICENSE.GPL copying.txt; do
		mv ${pkgdir}${_prefix}/share/doc/kodi/${licensef} \
			${pkgdir}${_prefix}/share/licenses/${pkgname}
	done

	# install systemd service
	install -Dm0644 $srcdir/$_pkgname.service $pkgdir/usr/lib/systemd/system/$_pkgname.service
}
